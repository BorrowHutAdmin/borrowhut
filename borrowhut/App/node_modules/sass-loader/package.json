{
  "name": "sass-loader",
  "version": "1.0.4",
  "description": "Sass loader for webpack",
  "main": "index.js",
  "scripts": {
    "pretest": "node test/prepare.js",
    "test": "mocha -R spec",
    "test-source-map": "webpack-dev-server --config test/sourceMap/webpack.config.js --content-base ./test/sourceMap",
    "test-watch": "webpack --config test/watch/webpack.config.js",
    "test-hmr": "webpack-dev-server --config test/hmr/webpack.config.js --content-base ./test/hmr --hot --inline",
    "posttest": "jshint index.js test"
  },
  "keywords": [
    "sass",
    "libsass",
    "webpack",
    "loader"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jtangelder/sass-loader.git"
  },
  "author": {
    "name": "J. Tangelder"
  },
  "license": "MIT",
  "peerDependencies": {
    "node-sass": "^3.1.0"
  },
  "dependencies": {
    "loader-utils": "^0.2.5"
  },
  "devDependencies": {
    "css-loader": "^0.15.6",
    "enhanced-require": "^0.5.0-beta6",
    "extract-text-webpack-plugin": "^0.8.2",
    "jshint": "^2.8.0",
    "mocha": "^2.0.1",
    "node-sass": "^3.1.0",
    "raw-loader": "^0.5.1",
    "should": "^7.0.2",
    "style-loader": "^0.12.3",
    "webpack": "^1.4.0",
    "webpack-dev-server": "^1.7.0"
  },
  "readme": "# Sass loader for [webpack](http://webpack.github.io/)\n\n## Install\n\n`npm install sass-loader --save-dev`\n\nStarting with `1.0.0`, the sass-loader requires [node-sass](https://github.com/sass/node-sass) as [`peerDependency`](https://docs.npmjs.com/files/package.json#peerdependencies). Thus you are able to specify the required version accurately.\n\n---\n\n## Usage\n\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\n\n``` javascript\nvar css = require(\"!raw!sass!./file.scss\");\n// => returns compiled css code from file.scss, resolves imports\nvar css = require(\"!css!sass!./file.scss\");\n// => returns compiled css code from file.scss, resolves imports and url(...)s\n```\n\nUse in tandem with the [`style-loader`](https://github.com/webpack/style-loader) to add the css rules to your document:\n\n``` javascript\nrequire(\"!style!css!sass!./file.scss\");\n```\n\n### Apply via webpack config\n\nIt's recommended to adjust your `webpack.config` so `style!css!sass!` is applied automatically on all files ending on `.scss`:\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loader: \"style!css!sass\"\n      }\n    ]\n  }\n};\n```\n\nThen you only need to write: `require(\"./file.scss\")`.\n\n### Sass options\n\nYou can pass any Sass specific configuration options through to the render function via [query parameters](http://webpack.github.io/docs/using-loaders.html#query-parameters).\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.scss$/,\n        loader: \"style!css!sass?outputStyle=expanded&\" +\n          \"includePaths[]=\" +\n            (path.resolve(__dirname, \"./bower_components\")) + \"&\" +\n          \"includePaths[]=\" +\n            (path.resolve(__dirname, \"./node_modules\"))\n      }\n    ]\n  }\n};\n```\n\nSee [node-sass](https://github.com/andrew/node-sass) for all available options.\n\n### Imports\n\nwebpack provides an [advanced mechanism to resolve files](http://webpack.github.io/docs/resolving.html). The sass-loader uses node-sass' custom importer feature to pass all queries to the webpack resolving engine. Thus you can import your sass-modules from `node_modules`. Just prepend them with a `~` which tells webpack to look-up the [`modulesDirectories`](http://webpack.github.io/docs/configuration.html#resolve-modulesdirectories)\n\n```css\n@import \"~bootstrap/less/bootstrap\";\n```\n\nIt's important to only prepend it with `~`, because `~/` resolves to the home-directory. webpack needs to distinguish between `bootstrap` and `~bootstrap` because CSS- and Sass-files have no special syntax for importing relative files. Writing `@import \"file\"` is the same as `@import \"./file\";`\n\n### .sass files\n\nFor requiring `.sass` files, add `indentedSyntax` as a loader option:\n\n``` javascript\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.sass$/,\n        // Passing indentedSyntax query param to node-sass\n        loader: \"style!css!sass?indentedSyntax\"\n      }\n    ]\n  }\n};\n```\n\n### Importing across language styles\n\nImporting a file written in the other language style, like importing a `.sass` file from a `.scss` file, requires the file extension to be set explicitly. If no extension is specified, the extension is inherited from the importing file.\n\n## Source maps\n\nBecause of browser limitations, source maps are only available in conjunction with the [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin). Use that plugin to extract the CSS code from the generated JS bundle into a separate file (which even improves the perceived performance because JS and CSS are downloaded in parallel).\n\nThen your `webpack.config.js` should look like this:\n\n```javascript\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    ...\n    // must be 'source-map' or 'inline-source-map'\n    devtool: 'source-map',\n    module: {\n        loaders: [\n            {\n                test: /\\.scss$/,\n                loader: ExtractTextPlugin.extract(\n                    // activate source maps via loader query\n                    'css?sourceMap!' +\n                    'sass?sourceMap'\n                )\n            }\n        ]\n    },\n    plugins: [\n        // extract inline css into separate 'styles.css'\n        new ExtractTextPlugin('styles.css')\n    ]\n};\n```\n\nIf you want to edit the original Sass files inside Chrome, [there's a good blog post](https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0). Checkout [test/sourceMap](https://github.com/jtangelder/sass-loader/tree/master/test) for a running example. Make sure to serve the content with an HTTP server.\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jtangelder/sass-loader/issues"
  },
  "_id": "sass-loader@1.0.4",
  "_from": "sass-loader@^1.0.4"
}
